// Script para ayudar con el despliegue en producci√≥n
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// Funci√≥n para modificar el package.json del directorio /src
function updateClientPackageJson() {
  const packageJsonPath = path.join(__dirname, 'src', 'package.json');
  const packageJson = require(packageJsonPath);
  
  // Guardar el script original
  const originalBuildScript = packageJson.scripts.build;
  
  // Modificar para el despliegue (sin comprobaci√≥n de tipos)
  packageJson.scripts.build = "vite build";
  
  // Escribir el archivo actualizado
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2), 'utf8');
  
  console.log('‚úÖ Scripts de compilaci√≥n actualizados para producci√≥n');
  
  return originalBuildScript;
}

// Funci√≥n para ejecutar el script de correcci√≥n de importaciones en src
function runDeployFixScript() {
  return new Promise((resolve, reject) => {
    console.log('üîÑ Ejecutando script de correcci√≥n de importaciones...');
    const scriptPath = path.join(__dirname, 'src', 'deploy.mjs');
    
    // Ejecuta el script Node.js para corregir importaciones
    exec(`node ${scriptPath}`, (error, stdout) => {
      if (error) {
        console.error('‚ùå Error al ejecutar el script de correcci√≥n:', error);
        return reject(error);
      }
      
      console.log(stdout);
      console.log('‚úÖ Correcciones de importaci√≥n aplicadas con √©xito');
      resolve();
    });
  });
}

// Funci√≥n principal
async function main() {
  try {
    console.log('üöÄ Preparando archivos para despliegue...');
    const originalBuildScript = updateClientPackageJson();
    
    await runDeployFixScript();
    
    console.log('‚úÖ Todos los archivos est√°n listos para despliegue');
    console.log('‚ö†Ô∏è Recuerde restaurar la configuraci√≥n original despu√©s del despliegue');
  } catch (error) {
    console.error('‚ùå Error durante la preparaci√≥n del despliegue:', error);
    process.exit(1);
  }
}

main();
